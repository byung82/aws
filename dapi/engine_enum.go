// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package dapi

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"strings"
)

const (
	// DbEngineMysql is a DbEngine of type Mysql.
	DbEngineMysql DbEngine = iota
	// DbEnginePostgres is a DbEngine of type Postgres.
	DbEnginePostgres
)

const _DbEngineName = "mysqlpostgres"

var _DbEngineMap = map[DbEngine]string{
	0: _DbEngineName[0:5],
	1: _DbEngineName[5:13],
}

// String implements the Stringer interface.
func (x DbEngine) String() string {
	if str, ok := _DbEngineMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DbEngine(%d)", x)
}

var _DbEngineValue = map[string]DbEngine{
	_DbEngineName[0:5]:                   0,
	strings.ToLower(_DbEngineName[0:5]):  0,
	_DbEngineName[5:13]:                  1,
	strings.ToLower(_DbEngineName[5:13]): 1,
}

// ParseDbEngine attempts to convert a string to a DbEngine
func ParseDbEngine(name string) (DbEngine, error) {
	if x, ok := _DbEngineValue[name]; ok {
		return x, nil
	}
	return DbEngine(0), fmt.Errorf("%s is not a valid DbEngine", name)
}

// MarshalText implements the text marshaller method
func (x DbEngine) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DbEngine) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDbEngine(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var _DbEngineErrNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *DbEngine) Scan(value interface{}) (err error) {
	if value == nil {
		*x = DbEngine(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = DbEngine(v)
	case string:
		*x, err = ParseDbEngine(v)
	case []byte:
		*x, err = ParseDbEngine(string(v))
	case DbEngine:
		*x = v
	case int:
		*x = DbEngine(v)
	case *DbEngine:
		if v == nil {
			return _DbEngineErrNilPtr
		}
		*x = *v
	case uint:
		*x = DbEngine(v)
	case uint64:
		*x = DbEngine(v)
	case *int:
		if v == nil {
			return _DbEngineErrNilPtr
		}
		*x = DbEngine(*v)
	case *int64:
		if v == nil {
			return _DbEngineErrNilPtr
		}
		*x = DbEngine(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = DbEngine(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return _DbEngineErrNilPtr
		}
		*x = DbEngine(*v)
	case *uint:
		if v == nil {
			return _DbEngineErrNilPtr
		}
		*x = DbEngine(*v)
	case *uint64:
		if v == nil {
			return _DbEngineErrNilPtr
		}
		*x = DbEngine(*v)
	case *string:
		if v == nil {
			return _DbEngineErrNilPtr
		}
		*x, err = ParseDbEngine(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x DbEngine) Value() (driver.Value, error) {
	return x.String(), nil
}

type NullDbEngine struct {
	DbEngine DbEngine
	Valid    bool
	Set      bool
}

func NewNullDbEngine(val interface{}) (x NullDbEngine) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Scan implements the Scanner interface.
func (x *NullDbEngine) Scan(value interface{}) (err error) {
	x.Set = true
	if value == nil {
		x.DbEngine, x.Valid = DbEngine(0), false
		return
	}

	err = x.DbEngine.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullDbEngine) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.DbEngine.String(), nil
}

// MarshalJSON correctly serializes a NullDbEngine to JSON.
func (n NullDbEngine) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.DbEngine)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a NullDbEngine from JSON.
func (n *NullDbEngine) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}
